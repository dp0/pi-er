---
- name: check one host only
  fail:
    msg: Can only provision one host at a time.
  when:
    'play_hosts|length != 1'

- name: check device with ptuuid is present
  command:
    argv:
      - '{{ role_path }}/files/bin/ptuuid-to-dev'
      - '{{ pi_er_sd_ptuuid }}'
  register: device_for_ptuuid
  when: pi_er_sd_ptuuid is defined
  changed_when: false

- name: check device matches ptuuid
  fail:
    msg: Provided ptuuid does not match ptuuid on provided device.
  when:
    'pi_er_sd_ptuuid is defined and
     pi_er_sd_device != device_for_ptuuid.stdout'

- name: wait for acknowledgement if ptuuid has not been used
  pause:
    prompt: 'Warning: No PTUUID check has been performed.
             Will write to "{{ pi_er_sd_device }}".

             Press ENTER to continue'
  when:
    'pi_er_sd_ptuuid is not defined'

- name: get list of partitions for disk
  command: 'lsblk -JlpoNAME "{{ pi_er_sd_device }}"'
  register: device_files_obj
  changed_when: false

- name: ensure all devices unmounted
  command:
    argv:
      - 'umount'
      - '{{ item.name }}'
  become: true
  register: result
  failed_when:
    'result.rc != 0 and "not mounted" not in result.stderr'
  changed_when:
    'result.rc == 0'
  with_items:
    '{{ (device_files_obj.stdout|from_json).blockdevices }}'

- name: ensure image written to disk
  command:
    argv:
      - 'dd'
      - 'if={{ pi_er_image_file }}'
      - 'bs=1M'
      - 'of={{ pi_er_sd_device }}'
      - 'conv=fsync'
  become: true

- name: ensure filesystem synced
  command: 'sync'
  become: true

- name: ensure ptuuid remains consistent
  command:
    argv:
      - '{{ role_path }}/files/bin/write-ptable'
      - '{{ pi_er_sd_ptuuid }}'
      - '{{ pi_er_sd_device }}'
  become: true
  when:
    'pi_er_sd_ptuuid is defined'

- name: ensure filesystem synced
  command: 'sync'
  become: true

- name: get list of partitions for newly written disk
  command: 'lsblk -JlpoNAME,LABEL,FSTYPE "{{ pi_er_sd_device }}"'
  register: new_device_files_obj
  changed_when: false
  retries: 20
  delay: 3
  until: '["boot", "rootfs"] is subset(
         (new_device_files_obj.stdout|from_json).blockdevices|map(attribute="label")|list
         )'

- name: create temp boot mount dir
  tempfile:
    state: directory
    suffix: "pi_er_sd_boot"
  register: "boot_mount_dir"

- name: provision changes for fresh boot partition
  block:
    - name: mount boot partition
      command: 'mount -t {{ (new_device_files_obj.stdout|from_json)
                .blockdevices|selectattr("label", "equalto", "boot")|
                map(attribute="fstype")|first }} {{ (new_device_files_obj
                .stdout|from_json).blockdevices|selectattr("label", "equalto",
                "boot")|map(attribute="name")|first }}
                {{ boot_mount_dir.path }}'
    - name: ensure ssh enabled
      copy:
        content: ''
        dest: '{{ boot_mount_dir.path }}/ssh'
        force: false
        group: root
        owner: root
        mode: '0755'
  become: true
  always:
    - name: unmount boot partition
      command: 'umount {{ boot_mount_dir.path }}'
      register: result
      failed_when:
        - 'result.rc != 0'
        - '"not mounted" not in result.stderr'
      changed_when:
        - 'result.rc == 0'
    - name: remove temp boot mount dir
      file:
        path: '{{ boot_mount_dir.path }}'
        state: absent


- name: create temp root mount dir
  tempfile:
    state: directory
    suffix: "pi_er_sd_root"
  register: "root_mount_dir"

- name: provision changes for fresh root partition
  block:
    - name: mount root partition
      command: 'mount -t {{ (new_device_files_obj.stdout|from_json)
                .blockdevices|selectattr("label", "equalto", "rootfs")|
                map(attribute="fstype")|first }} {{ (new_device_files_obj
                .stdout|from_json).blockdevices|selectattr("label", "equalto",
                "rootfs")|map(attribute="name")|first }}
                {{ root_mount_dir.path }}'
    - name: ensure root user ssh dir exists
      file:
        path: '{{ root_mount_dir.path }}/root/.ssh'
        mode: '0700'
        owner: root
        group: root
        state: directory
    - name: ensure root user ssh authorized keys
      copy:
        src: '{{ pi_er_pub_key }}'
        dest: '{{ root_mount_dir.path }}/root/.ssh/authorized_keys'
        owner: root
        group: root
        mode: '0644'
    - name: ensure no password auth
      lineinfile:
        dest: '{{ root_mount_dir.path }}/etc/ssh/sshd_config'
        regexp: '^(#\s*)?PasswordAuthentication '
        line: 'PasswordAuthentication no'
    - name: ensure network settings
      template:
        src: templates/dhcpcd.conf.j2
        dest: '{{ root_mount_dir.path }}/etc/dhcpcd.conf'
        owner: root
        group: netdev
        mode: 0664
      when:
        'pi_er_netconf is defined'
  become: true
  always:
    - name: unmount root partition
      command: 'umount {{ root_mount_dir.path }}'
      register: result
      failed_when:
        - 'result.rc != 0'
        - '"not mounted" not in result.stderr'
      changed_when:
        - 'result.rc == 0'
    - name: remove temp root mount dir
      file:
        path: '{{ root_mount_dir.path }}'
        state: absent

- name: ensure filesystem synced
  command: 'sync'
  become: true
